program -> PROGRAM identifier ; VAR dec-list BEGIN stat-list END.
identifier ->  id { id | digit }
dec-list -> dec : type ;
dec -> identifier , dec | identifier
type -> INTEGER
stat-list -> stat | stat stat-list
stat -> write | assign
write -> WRITE( identifier ) ;
assign -> identifier = expr ;
expr -> term | term + expr | term - expr
term -> factor termtail
termtail -> * factor termtail | / factor termtail | LAMBDA
factor -> identifier | number | ( expr )
number -> sign digit { digit }
sign -> + | - | LAMBDA
digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
id -> a | b | c | d | e


http://hackingoff.com/compilers/ll-1-parser-generator

//Original Nonterminals//
term -> term * factor | term / factor | factor